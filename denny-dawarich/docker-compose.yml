version: '3.7'

services:
  app_proxy:
    environment:
      APP_HOST: denny-dawarich_app_1
      APP_PORT: 3000
      PROXY_AUTH_ADD: "false"
      
  redis:
    image: redis:8.2.0-alpine@sha256:7521abdff715d396aa482183942f3fe643344287c29ccb66eee16ac08a92190f
    command: redis-server
    volumes:
      - ${APP_DATA_DIR}/data/redis_data:/data
    restart: on-failure
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
      
  db:
    image: postgis/postgis:17-3.5-alpine@sha256:18ff8fc3fc18de3b1de6cda564a32621def670e2176202355aa8d0d82f394749 #multiarch?
    shm_size: 1G
    volumes:
      - ${APP_DATA_DIR}/data/db_data:/var/lib/postgresql/data
      - ${APP_DATA_DIR}/data/shared:/var/shared
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: dawarich_development
    restart: on-failure
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d dawarich_development" ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
      
  app:
    image: freikin/dawarich:0.30.8@sha256:033fdd6ec4e64807ee7639bd79b0fdc2a6c071633b30fc1ec85595608ef2a539
    volumes:
      - ${APP_DATA_DIR}/data/public:/var/app/public
      - ${APP_DATA_DIR}/data/watched:/var/app/tmp/imports/watched
      - ${APP_DATA_DIR}/data/storage:/var/app/storage
      - ${APP_DATA_DIR}/data/db_data:/dawarich_db_data
    stdin_open: true
    tty: true
    entrypoint: web-entrypoint.sh
    command: ['bin/rails', 'server', '-p', '3000', '-b', '::']
    restart: on-failure
    environment:
      RAILS_ENV: development
      REDIS_URL: redis://redis:6379
      DATABASE_HOST: db
      DATABASE_USERNAME: postgres
      DATABASE_PASSWORD: password
      DATABASE_NAME: dawarich_development
      MIN_MINUTES_SPENT_IN_CITY: 60
      RAILS_DEVELOPMENT_HOSTS: "umbrel.local,umbrel,umbrel-2.local,umbrel-2,umbrel-3.local,umbrel-3"
      TIME_ZONE: Europe/Berlin
      APPLICATION_PROTOCOL: http
      PROMETHEUS_EXPORTER_ENABLED: "false"
      PROMETHEUS_EXPORTER_HOST: 0.0.0.0
      PROMETHEUS_EXPORTER_PORT: 9394
      SELF_HOSTED: "true"
      STORE_GEODATA: "true"
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
    healthcheck:
      test: [ "CMD-SHELL", "wget -qO - http://127.0.0.1:3000/api/v1/health | grep -q '\"status\"\\s*:\\s*\"ok\"'" ]
      interval: 10s
      retries: 30
      start_period: 30s
      timeout: 10s
    depends_on:
      db:
        condition: service_healthy
        restart: true
      redis:
        condition: service_healthy
        restart: true
    deploy:
      resources:
        limits:
          cpus: '0.50' 
          memory: '4G'
  sidekiq:
    image: freikin/dawarich:0.30.8@sha256:033fdd6ec4e64807ee7639bd79b0fdc2a6c071633b30fc1ec85595608ef2a539
    volumes:
      - ${APP_DATA_DIR}/data/public:/var/app/public
      - ${APP_DATA_DIR}/data/watched:/var/app/tmp/imports/watched
      - ${APP_DATA_DIR}/data/storage:/var/app/storage
    stdin_open: true
    tty: true
    entrypoint: sidekiq-entrypoint.sh
    command: ['sidekiq']
    restart: on-failure
    environment:
      RAILS_ENV: development
      REDIS_URL: redis://redis:6379
      DATABASE_HOST: db
      DATABASE_USERNAME: postgres
      DATABASE_PASSWORD: password
      DATABASE_NAME: dawarich_development
      RAILS_DEVELOPMENT_HOSTS: "umbrel.local,umbrel,umbrel-2.local,umbrel-2,umbrel-3.local,umbrel-3"
      BACKGROUND_PROCESSING_CONCURRENCY: 10
      APPLICATION_PROTOCOL: http
      PROMETHEUS_EXPORTER_ENABLED: "false"
      PROMETHEUS_EXPORTER_HOST: dawarich_app
      PROMETHEUS_EXPORTER_PORT: 9394
      SELF_HOSTED: "true"
      STORE_GEODATA: "true"
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
    healthcheck:
      test: [ "CMD-SHELL", "pgrep -f sidekiq" ]
      interval: 10s
      retries: 30
      start_period: 30s
      timeout: 10s
    depends_on:
      db:
        condition: service_healthy
        restart: true
      redis:
        condition: service_healthy
        restart: true
      app:
        condition: service_healthy
        restart: true
